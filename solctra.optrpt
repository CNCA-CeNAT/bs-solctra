Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: load_coil_data(double *, double *, double *, const std::string &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(16,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.9/bits/basic_string.h(1026,15) ]
LOOP END
===========================================================================

Begin optimization report for: e_roof(GlobalData &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(29,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solctra.cpp(33,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at solctra.cpp(33,9)
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(35,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(35,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(36,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(36,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(37,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(37,13) ]
      remark #15388: vectorization support: reference data has aligned access   [ solctra.cpp(38,13) ]
      remark #15388: vectorization support: reference data has aligned access   [ solctra.cpp(39,56) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(40,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(41,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(42,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.385
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 154 
      remark #15477: vector loop cost: 65.000 
      remark #15478: estimated potential speedup: 2.340 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at solctra.cpp(33,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: R_vectors(double *, double *, double *, const cartesian &, Coil &, Coil &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(59,9)
   remark #15388: vectorization support: reference Rmi has aligned access   [ solctra.cpp(55,9) ]
   remark #15388: vectorization support: reference x has aligned access   [ solctra.cpp(55,9) ]
   remark #15388: vectorization support: reference Rmi has aligned access   [ solctra.cpp(57,9) ]
   remark #15388: vectorization support: reference y has aligned access   [ solctra.cpp(57,9) ]
   remark #15388: vectorization support: reference Rmi has aligned access
   remark #15388: vectorization support: reference z has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 29 
   remark #15477: vector loop cost: 10.500 
   remark #15478: estimated potential speedup: 2.740 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at solctra.cpp(73,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at solctra.cpp(73,9)
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(69,9) ]
   remark #15389: vectorization support: reference x has unaligned access   [ solctra.cpp(69,9) ]
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(71,9) ]
   remark #15389: vectorization support: reference y has unaligned access   [ solctra.cpp(71,9) ]
   remark #15388: vectorization support: reference Rmf has aligned access
   remark #15389: vectorization support: reference z has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.821
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 32 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 2.230 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at solctra.cpp(73,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: runParticles(const GlobalData &, const char *, const Coil &, int, int, const double &, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(296,5)
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ solctra.cpp(306,13) ]
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ utils.h(25,9) ]
   remark #15382: vectorization support: call to function RK4(const GlobalData &, const char *, const cartesian &, int, const double &, int, int) cannot be vectorized   [ solctra.cpp(308,13) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between myRank line 298 and call:RK4(const GlobalData &, con line 308
   remark #15346: vector dependence: assumed FLOW dependence between  line 308 and myRank line 298
LOOP END
===========================================================================

Begin optimization report for: RK4(const GlobalData &, const char *, const cartesian &, int, const double &, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(214,5)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ solctra.cpp(276,17) ]
LOOP END
===========================================================================

Begin optimization report for: magnetic_field(const GlobalData &, const cartesian &)

    Report from: OpenMP optimizations [openmp]

solctra.cpp(82:1-82:1):OMP:_Z14magnetic_fieldRK10GlobalDataRK9cartesian:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(160,5)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ solctra.cpp(162,9) ]
LOOP END

LOOP BEGIN at solctra.cpp(97,1)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solctra.cpp(98,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at solctra.cpp(56,9) inlined into solctra.cpp(103,13)
         remark #15388: vectorization support: reference Rmi.x has aligned access   [ solctra.cpp(55,9) ]
         remark #15388: vectorization support: reference x has aligned access   [ solctra.cpp(55,9) ]
         remark #15388: vectorization support: reference Rmi.y has aligned access   [ solctra.cpp(57,9) ]
         remark #15388: vectorization support: reference y has aligned access   [ solctra.cpp(57,9) ]
         remark #15388: vectorization support: reference Rmi.z has aligned access   [ solctra.cpp(59,9) ]
         remark #15388: vectorization support: reference z has aligned access   [ solctra.cpp(59,9) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 3 
         remark #15449: unmasked aligned unit stride stores: 3 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 29 
         remark #15477: vector loop cost: 10.500 
         remark #15478: estimated potential speedup: 2.740 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at solctra.cpp(67,16) inlined into solctra.cpp(103,13)
         remark #15388: vectorization support: reference Rmf.x has aligned access   [ solctra.cpp(69,9) ]
         remark #15389: vectorization support: reference x has unaligned access   [ solctra.cpp(69,9) ]
         remark #15388: vectorization support: reference Rmf.y has aligned access   [ solctra.cpp(71,9) ]
         remark #15389: vectorization support: reference y has unaligned access   [ solctra.cpp(71,9) ]
         remark #15388: vectorization support: reference Rmf.z has aligned access   [ solctra.cpp(73,9) ]
         remark #15389: vectorization support: reference z has unaligned access   [ solctra.cpp(73,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.625
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 3 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 32 
         remark #15477: vector loop cost: 12.000 
         remark #15478: estimated potential speedup: 2.640 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at solctra.cpp(109,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between B.B line 139 and B.B line 139
         remark #15346: vector dependence: assumed OUTPUT dependence between B.B line 139 and B.B line 139
      LOOP END
   LOOP END
LOOP END
===========================================================================
