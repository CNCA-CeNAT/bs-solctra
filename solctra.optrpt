Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: load_coil_data(double *, double *, double *, const std::string &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(19,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.9/bits/basic_string.h(1026,15) ]

   LOOP BEGIN at solctra.cpp(34,13)
      remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ solctra.cpp(36,17) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between localZ line 36 and z line 39
      remark #15346: vector dependence: assumed OUTPUT dependence between z line 39 and localZ line 36
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: e_roof(GlobalData &)

    Report from: OpenMP optimizations [openmp]

solctra.cpp(48:1-48:1):OMP:_Z6e_roofR10GlobalData:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(52,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solctra.cpp(56,13)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at solctra.cpp(56,13)
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(58,17) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(58,17) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(59,17) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(59,17) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(60,17) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(60,17) ]
      remark #15388: vectorization support: reference data has aligned access   [ solctra.cpp(61,17) ]
      remark #15388: vectorization support: reference data has aligned access   [ solctra.cpp(62,60) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(63,17) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(64,17) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(65,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.385
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 154 
      remark #15477: vector loop cost: 65.000 
      remark #15478: estimated potential speedup: 2.340 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at solctra.cpp(56,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: R_vectors(double *, double *, double *, const cartesian &, Coil &, Coil &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(81,9)
   remark #15388: vectorization support: reference Rmi has aligned access   [ solctra.cpp(79,9) ]
   remark #15388: vectorization support: reference x has aligned access   [ solctra.cpp(79,9) ]
   remark #15388: vectorization support: reference Rmi has aligned access   [ solctra.cpp(80,9) ]
   remark #15388: vectorization support: reference y has aligned access   [ solctra.cpp(80,9) ]
   remark #15388: vectorization support: reference Rmi has aligned access
   remark #15388: vectorization support: reference z has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.100
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 26 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 3.450 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at solctra.cpp(92,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at solctra.cpp(92,9)
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(90,9) ]
   remark #15389: vectorization support: reference x has unaligned access   [ solctra.cpp(90,9) ]
   remark #15388: vectorization support: reference Rmf has aligned access   [ solctra.cpp(91,9) ]
   remark #15389: vectorization support: reference y has unaligned access   [ solctra.cpp(91,9) ]
   remark #15388: vectorization support: reference Rmf has aligned access
   remark #15389: vectorization support: reference z has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.400
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 29 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 2.750 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at solctra.cpp(92,9)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at solctra.cpp(92,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(90,9) ]
   remark #15389: vectorization support: reference x has unaligned access   [ solctra.cpp(90,9) ]
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(91,9) ]
   remark #15389: vectorization support: reference y has unaligned access   [ solctra.cpp(91,9) ]
   remark #15388: vectorization support: reference Rmf has aligned access
   remark #15389: vectorization support: reference z has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.912
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at solctra.cpp(92,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: runParticles(const GlobalData &, int, int, double, int)

    Report from: OpenMP optimizations [openmp]

solctra.cpp(298:1-298:1):OMP:_Z12runParticlesRK10GlobalDataiidi:  OpenMP multithreaded code generation for ORDERED was successful

    Report from: Offload optimizations [offload]

OFFLOAD:runParticles(304,1):  Offload to target MIC <expr>
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
 Data sent from host to target
       data, pointer to data with element count specified in pragma
       i, scalar size 4 bytes
       step_size, scalar size 8 bytes
       mode, scalar size 4 bytes
       steps, scalar size 4 bytes
       A, record size 24 bytes
 Data received by host from target
       data, pointer to data with element count specified in pragma
       A, record size 24 bytes


    Report from: OpenMP optimizations [openmp]

solctra.cpp(292:1-292:1):OMP:_Z12runParticlesRK10GlobalDataiidi:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(292,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form

   LOOP BEGIN at solctra.cpp(293,5)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: RK4(const GlobalData &, const cartesian &, int, const double &, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(223,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ solctra.cpp(225,35) ]
LOOP END
===========================================================================

Begin optimization report for: magnetic_field(const GlobalData &, const cartesian &)

    Report from: OpenMP optimizations [openmp]

solctra.cpp(100:1-100:1):OMP:_Z14magnetic_fieldRK10GlobalDataRK9cartesian:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(184,5)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ solctra.cpp(186,9) ]
LOOP END

LOOP BEGIN at solctra.cpp(128,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solctra.cpp(77,16) inlined into solctra.cpp(133,13)
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(79,9) ]
      remark #15388: vectorization support: reference x has aligned access   [ solctra.cpp(79,9) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(80,9) ]
      remark #15388: vectorization support: reference y has aligned access   [ solctra.cpp(80,9) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(81,9) ]
      remark #15388: vectorization support: reference z has aligned access   [ solctra.cpp(81,9) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.100
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 26 
      remark #15477: vector loop cost: 7.500 
      remark #15478: estimated potential speedup: 3.450 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at solctra.cpp(88,16) inlined into solctra.cpp(133,13)
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(90,9) ]
      remark #15389: vectorization support: reference x has unaligned access   [ solctra.cpp(90,9) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(91,9) ]
      remark #15389: vectorization support: reference y has unaligned access   [ solctra.cpp(91,9) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(92,9) ]
      remark #15389: vectorization support: reference z has unaligned access   [ solctra.cpp(92,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.208
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 29 
      remark #15477: vector loop cost: 9.000 
      remark #15478: estimated potential speedup: 3.200 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at solctra.cpp(138,13)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ solctra.cpp(163,17) ]
   LOOP END
LOOP END
===========================================================================
