Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: load_coil_data(double *, double *, double *, const std::string &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(16,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.9/bits/basic_string.h(1026,15) ]

   LOOP BEGIN at solctra.cpp(31,13)
      remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ solctra.cpp(33,17) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between localZ line 33 and z line 36
      remark #15346: vector dependence: assumed OUTPUT dependence between z line 36 and localZ line 33
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: e_roof(GlobalData &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(46,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solctra.cpp(50,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at solctra.cpp(50,9)
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(52,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(52,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(53,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(53,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(54,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(54,13) ]
      remark #15388: vectorization support: reference data has aligned access   [ solctra.cpp(55,13) ]
      remark #15388: vectorization support: reference data has aligned access   [ solctra.cpp(56,56) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(57,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(58,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(59,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.385
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 154 
      remark #15477: vector loop cost: 65.000 
      remark #15478: estimated potential speedup: 2.340 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at solctra.cpp(50,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: R_vectors(double *, double *, double *, const cartesian &, Coil &, Coil &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(74,9)
   remark #15388: vectorization support: reference Rmi has aligned access   [ solctra.cpp(72,9) ]
   remark #15388: vectorization support: reference x has aligned access   [ solctra.cpp(72,9) ]
   remark #15388: vectorization support: reference Rmi has aligned access   [ solctra.cpp(73,9) ]
   remark #15388: vectorization support: reference y has aligned access   [ solctra.cpp(73,9) ]
   remark #15388: vectorization support: reference Rmi has aligned access
   remark #15388: vectorization support: reference z has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.100
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 26 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 3.450 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at solctra.cpp(85,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at solctra.cpp(85,9)
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(83,9) ]
   remark #15389: vectorization support: reference x has unaligned access   [ solctra.cpp(83,9) ]
   remark #15388: vectorization support: reference Rmf has aligned access   [ solctra.cpp(84,9) ]
   remark #15389: vectorization support: reference y has unaligned access   [ solctra.cpp(84,9) ]
   remark #15388: vectorization support: reference Rmf has aligned access
   remark #15389: vectorization support: reference z has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.400
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 29 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 2.750 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at solctra.cpp(85,9)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at solctra.cpp(85,9)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(83,9) ]
   remark #15389: vectorization support: reference x has unaligned access   [ solctra.cpp(83,9) ]
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(84,9) ]
   remark #15389: vectorization support: reference y has unaligned access   [ solctra.cpp(84,9) ]
   remark #15388: vectorization support: reference Rmf has aligned access
   remark #15389: vectorization support: reference z has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.912
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at solctra.cpp(85,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: RK4(const GlobalData &, const cartesian &, int, const double &, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(197,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ solctra.cpp(199,35) ]
LOOP END
===========================================================================

Begin optimization report for: runParticles(const GlobalData &, int, int, const double &, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(266,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at solctra.cpp(197,5) inlined into solctra.cpp(272,9)
      remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ solctra.cpp(199,35) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: magnetic_field(const GlobalData &, const cartesian &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(114,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solctra.cpp(74,20) inlined into solctra.cpp(118,13)
      remark #15388: vectorization support: reference rmiX has aligned access   [ solctra.cpp(72,9) ]
      remark #15388: vectorization support: reference x has aligned access   [ solctra.cpp(72,9) ]
      remark #15388: vectorization support: reference rmiY has aligned access   [ solctra.cpp(73,9) ]
      remark #15388: vectorization support: reference y has aligned access   [ solctra.cpp(73,9) ]
      remark #15388: vectorization support: reference rmiZ has aligned access   [ solctra.cpp(74,9) ]
      remark #15388: vectorization support: reference z has aligned access   [ solctra.cpp(74,9) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.100
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 23 
      remark #15477: vector loop cost: 7.500 
      remark #15478: estimated potential speedup: 3.050 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at solctra.cpp(81,16) inlined into solctra.cpp(118,13)
      remark #15388: vectorization support: reference rmfX has aligned access   [ solctra.cpp(83,9) ]
      remark #15389: vectorization support: reference x has unaligned access   [ solctra.cpp(83,9) ]
      remark #15388: vectorization support: reference rmfY has aligned access   [ solctra.cpp(84,9) ]
      remark #15389: vectorization support: reference y has unaligned access   [ solctra.cpp(84,9) ]
      remark #15388: vectorization support: reference rmfZ has aligned access   [ solctra.cpp(85,9) ]
      remark #15389: vectorization support: reference z has unaligned access   [ solctra.cpp(85,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.208
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 26 
      remark #15477: vector loop cost: 9.000 
      remark #15478: estimated potential speedup: 2.870 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at solctra.cpp(122,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between rmiX line 124 and B.z line 149
      remark #15346: vector dependence: assumed FLOW dependence between B.z line 149 and rmiX line 124
   LOOP END
LOOP END

LOOP BEGIN at solctra.cpp(158,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between B_perIteration line 160 and B.x line 160
   remark #15346: vector dependence: assumed FLOW dependence between B.x line 160 and B_perIteration line 160
LOOP END
===========================================================================
