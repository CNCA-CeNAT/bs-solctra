Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: load_coil_data(Coil **&, const std::string &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(15,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.9/bits/basic_string.h(1026,15) ]

   LOOP BEGIN at solctra.cpp(30,13)
      remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ solctra.cpp(32,17) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between z line 32 and coils line 35
      remark #15346: vector dependence: assumed ANTI dependence between coils line 35 and z line 32
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: e_roof(GlobalData &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(45,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solctra.cpp(48,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at solctra.cpp(48,9)
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(50,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(50,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(51,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(51,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(52,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(52,13) ]
      remark #15389: vectorization support: reference (unknown) has unaligned access   [ solctra.cpp(53,13) ]
      remark #15389: vectorization support: reference (unknown) has unaligned access   [ solctra.cpp(54,56) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(55,13) ]
      remark #15389: vectorization support: reference data has unaligned access   [ solctra.cpp(56,13) ]
      remark #15388: vectorization support: reference data has aligned access   [ solctra.cpp(57,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.422
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 7 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 182 
      remark #15477: vector loop cost: 64.000 
      remark #15478: estimated potential speedup: 2.800 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at solctra.cpp(48,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: R_vectors(Coil *, const cartesian &, Coil &, Coil &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(67,5)
   remark #15388: vectorization support: reference Rmi has aligned access   [ solctra.cpp(69,9) ]
   remark #15388: vectorization support: reference coil has aligned access   [ solctra.cpp(69,9) ]
   remark #15388: vectorization support: reference Rmi has aligned access   [ solctra.cpp(70,9) ]
   remark #15388: vectorization support: reference coil has aligned access   [ solctra.cpp(70,9) ]
   remark #15388: vectorization support: reference Rmi has aligned access   [ solctra.cpp(71,9) ]
   remark #15388: vectorization support: reference coil has aligned access   [ solctra.cpp(71,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.100
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 26 
   remark #15477: vector loop cost: 7.500 
   remark #15478: estimated potential speedup: 3.450 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at solctra.cpp(77,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at solctra.cpp(77,5)
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(79,9) ]
   remark #15389: vectorization support: reference coil has unaligned access   [ solctra.cpp(79,9) ]
   remark #15388: vectorization support: reference Rmf has aligned access   [ solctra.cpp(80,9) ]
   remark #15389: vectorization support: reference coil has unaligned access   [ solctra.cpp(80,9) ]
   remark #15388: vectorization support: reference Rmf has aligned access   [ solctra.cpp(81,9) ]
   remark #15389: vectorization support: reference coil has unaligned access   [ solctra.cpp(81,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.400
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 29 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 2.750 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at solctra.cpp(77,5)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at solctra.cpp(77,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(79,9) ]
   remark #15389: vectorization support: reference Rmf has unaligned access   [ solctra.cpp(80,9) ]
   remark #15388: vectorization support: reference Rmf has aligned access   [ solctra.cpp(81,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.625
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at solctra.cpp(77,5)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: RK4(const GlobalData &, const cartesian &, unsigned int, const double &, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(163,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ solctra.cpp(165,35) ]
LOOP END
===========================================================================

Begin optimization report for: magnetic_field(const GlobalData &, const cartesian &)

    Report from: OpenMP optimizations [openmp]

solctra.cpp(88:1-88:1):OMP:_Z14magnetic_fieldRK10GlobalDataRK9cartesian:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Vector optimizations [vec]


LOOP BEGIN at solctra.cpp(129,5)
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 6
   remark #15309: vectorization support: normalized vectorization overhead 0.452
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 10.500 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at solctra.cpp(89,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at solctra.cpp(67,5) inlined into solctra.cpp(96,9)
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(69,9) ]
      remark #15388: vectorization support: reference coil has aligned access   [ solctra.cpp(69,9) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(70,9) ]
      remark #15388: vectorization support: reference coil has aligned access   [ solctra.cpp(70,9) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(71,9) ]
      remark #15388: vectorization support: reference coil has aligned access   [ solctra.cpp(71,9) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.100
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 26 
      remark #15477: vector loop cost: 7.500 
      remark #15478: estimated potential speedup: 3.450 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at solctra.cpp(77,5) inlined into solctra.cpp(96,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at solctra.cpp(77,5) inlined into solctra.cpp(96,9)
      remark #15389: vectorization support: reference Rmf.Rmf has unaligned access   [ solctra.cpp(79,9) ]
      remark #15389: vectorization support: reference coil has unaligned access   [ solctra.cpp(79,9) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(80,9) ]
      remark #15389: vectorization support: reference coil has unaligned access   [ solctra.cpp(80,9) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(81,9) ]
      remark #15389: vectorization support: reference coil has unaligned access   [ solctra.cpp(81,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.400
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 29 
      remark #15477: vector loop cost: 10.000 
      remark #15478: estimated potential speedup: 2.750 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at solctra.cpp(77,5) inlined into solctra.cpp(96,9)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at solctra.cpp(77,5) inlined into solctra.cpp(96,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference Rmf.Rmf has unaligned access   [ solctra.cpp(79,9) ]
      remark #15389: vectorization support: reference Rmf.Rmf has unaligned access   [ solctra.cpp(80,9) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(81,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.625
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at solctra.cpp(77,5) inlined into solctra.cpp(96,9)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at solctra.cpp(99,9)
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(101,37) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(101,37) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(101,37) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(101,37) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(101,37) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(101,37) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(102,37) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(102,37) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(102,37) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(102,37) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(102,37) ]
      remark #15388: vectorization support: reference Rmf.Rmf has aligned access   [ solctra.cpp(102,37) ]
      remark #15388: vectorization support: reference data has aligned access   [ solctra.cpp(106,13) ]
      remark #15388: vectorization support: reference data has aligned access   [ solctra.cpp(107,13) ]
      remark #15388: vectorization support: reference data has aligned access   [ solctra.cpp(108,13) ]
      remark #15388: vectorization support: reference (unknown) has aligned access   [ solctra.cpp(112,107) ]
      remark #15388: vectorization support: reference (unknown) has aligned access   [ solctra.cpp(112,107) ]
      remark #15388: vectorization support: reference (unknown) has aligned access   [ solctra.cpp(112,107) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(115,13) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(116,13) ]
      remark #15388: vectorization support: reference Rmi.Rmi has aligned access   [ solctra.cpp(117,13) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.292
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 21 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 318 
      remark #15477: vector loop cost: 137.000 
      remark #15478: estimated potential speedup: 2.310 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END
===========================================================================
